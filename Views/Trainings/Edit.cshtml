@model WebApplication1.Models.Training
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Edit";
    // var employees = ViewData["Employees"] as List<WebApplication1.Models.Employee>;
    // if (employees == null)
    // {
    //     employees = new List<WebApplication1.Models.Employee>(); // Provide a default value if null
    // }
    // var selectedEmployeeIds = ViewData["SelectedEmployeeIds"] as int[];
}

<h1>Edit</h1>

<h4>Training</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" id="trainingForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />

            <div class="form-group my-2">
                <label asp-for="OrganizationId" class="control-label">Organization</label>
                <p class="form-control-static my-2 fw-bold">@ViewBag.OrganizationName</p>
                <input type="hidden" asp-for="OrganizationId" id="hiddenOrganizationId" />
                <span asp-validation-for="OrganizationId" class="text-danger"></span>
            </div>

            <div class="form-group my-2">
                <label asp-for="TrainingDate" class="control-label"></label>
                <input asp-for="TrainingDate" class="form-control" type="date" />
                <span asp-validation-for="TrainingDate" class="text-danger"></span>
            </div>

            <div class="form-group my-2">
                <label asp-for="PlaceOfTraining" class="control-label"></label>
                <select asp-for="PlaceOfTraining" class="form-control">
                    <option value="Room 1">Room 1</option>
                    <option value="Room 2">Room 2</option>
                    <option value="Room 3">Room 3</option>
                    <option value="Room 4">Room 4</option>
                </select>
                <span asp-validation-for="PlaceOfTraining" class="text-danger"></span>
            </div>

            <div class="form-group my-2">
                <label asp-for="PurposeOfTraining" class="control-label"></label>
                <input asp-for="PurposeOfTraining" class="form-control" />
                <span asp-validation-for="PurposeOfTraining" class="text-danger"></span>
            </div>

            <div class="form-group my-2">
                <label for="employeeSelect">Employees</label>
                <div class="multiselect">
                    <div class="selectBox" onclick="showCheckboxes()">
                        <select>
                            <option>Select Employees</option>
                        </select>
                        <div class="overSelect"></div>
                    </div>
                    <div id="checkboxes">
                        <!-- Checkboxes will be dynamically added here -->
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-6 my-2">
                    <input type="submit" value="Save" class="btn btn-primary w-100" />
                </div>
                <div class="col-6 my-2">
                    <a asp-action="Index" class="btn btn-outline-secondary w-100">Back to List</a>
                </div>
            </div>
        </form>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        var organizationId = $('#hiddenOrganizationId').val();
        var selectedEmployeeIds = @Html.Raw(JsonConvert.SerializeObject(ViewData["SelectedEmployeeIds"]));

        if (organizationId) {
            loadEmployees(organizationId);
        }

        function loadEmployees(organizationId) {
            $.getJSON('@Url.Action("GetEmployeesFromOrganization")', { organizationId: organizationId }, function (data) {
                var $checkboxes = $('#checkboxes');
                $checkboxes.empty();
                
                if(data.length > 0) {
                    $.each(data, function (index, employee) {
                        var isChecked = selectedEmployeeIds.includes(employee.id);
                        $checkboxes.append($('<label>', {
                            for: employee.id
                        }).append(
                            $('<input>', {
                                type: 'checkbox',
                                value: employee.id,
                                id: employee.id,
                                name: 'employeeIds', // This name should match the form field's name for POST data
                                checked: isChecked
                            })
                        ).append(employee.name));
                    });
                } else {
                    $checkboxes.append('<p>No Employees available</p>');
                }

            }).fail(function () {
                console.error("Error fetching employees");
            });
        }

        $('#organizationSelect').change(function () {
            var selectedOrgId = $(this).val();
            if (selectedOrgId) {
                loadEmployees(selectedOrgId);
            }
        });

        $('#trainingForm').on('submit', function () {
            // Log selected employee IDs for debugging
            var selectedEmployeeIds = $('#checkboxes input:checked').map(function () {
                return this.value;
            }).get();
            console.log('Selected Employee IDs:', selectedEmployeeIds);
        });
    });

    function showCheckboxes() {
        var checkboxes = document.getElementById("checkboxes");
        checkboxes.style.display = checkboxes.style.display === "block" ? "none" : "block";
    }

    $(document).click(function(event) {
            var target = $(event.target);
            if (!target.closest('.multiselect').length) {
                $('#checkboxes').hide();
            }
        });
</script>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
